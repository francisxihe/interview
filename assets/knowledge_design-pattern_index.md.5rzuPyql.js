import{_ as n,c as r,m as t,a,t as o,U as s,o as i}from"./chunks/framework.n5rCxQTk.js";const T=JSON.parse('{"title":"设计模式（Design Pattern）","description":"","frontmatter":{"title":"设计模式（Design Pattern）"},"headers":[],"relativePath":"knowledge/design-pattern/index.md","filePath":"knowledge/design-pattern/index.md"}'),l={name:"knowledge/design-pattern/index.md"},d={id:"frontmatter-title",tabindex:"-1"},_=t("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),c=s("<p>设计模式是在软件工程中常见问题的典型解决方案。它是一种在特定上下文中解决软件设计问题的模板或指导方针。设计模式并不是可以直接转化成代码的模板，而是在特定情况下应用的最佳实践指导。常见的设计模式包括：</p><ol><li><strong>创建型模式</strong>：如单例模式、工厂方法模式，涉及对象的创建机制。</li><li><strong>结构型模式</strong>：如适配器模式、装饰者模式，处理对象组合或组织方式。</li><li><strong>行为型模式</strong>：如观察者模式、策略模式，关注对象间的交互和责任分配。</li><li><strong>并发型模式</strong>：如生产者-消费者模式，处理多线程编程中的问题。</li><li><strong>架构模式</strong>：如 MVC 模式、服务定位器模式，用于大型系统架构设计。</li></ol>",2);function g(e,p,m,f,h,x){return i(),r("div",null,[t("h1",d,[a(o(e.$frontmatter.title)+" ",1),_]),c])}const k=n(l,[["render",g]]);export{T as __pageData,k as default};
