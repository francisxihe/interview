import{_ as e,c as i,o as l,U as a}from"./chunks/framework.n5rCxQTk.js";const m=JSON.parse('{"title":"背景","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/framework/Vite.md","filePath":"knowledge/framework/Vite.md"}'),t={name:"knowledge/framework/Vite.md"},o=a('<h1 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h1><p>随着前端业务的复杂化，js 代码量呈指数增长，webpack 打包构建时间越来越久，dev server 性能遇到瓶颈：</p><ul><li>缓慢的服务启动</li><li>缓慢的 HMR 热更新</li></ul><p>缓慢的开发环境，大大降低了开发者的幸福感，在以上背景下 Vite 应运而生。</p><h1 id="什么是-vite" tabindex="-1">什么是 Vite <a class="header-anchor" href="#什么是-vite" aria-label="Permalink to &quot;什么是 Vite&quot;">​</a></h1><p>基于 esbuild 与 Rollup，依靠浏览器自身 ESM 编译功能， 实现极致开发体验的新一代构建工具！</p><h1 id="处理流程对比" tabindex="-1">处理流程对比 <a class="header-anchor" href="#处理流程对比" aria-label="Permalink to &quot;处理流程对比&quot;">​</a></h1><p>Webpack 通过先将整个应用打包，再将打包后代码提供给 dev server，开发者才能开始开发。</p><p>Vite 直接将源码交给浏览器，实现 dev server 秒开，浏览器显示页面需要相关模块时，再向 dev server 发起请求，服务器简单处理后，将该模块返回给浏览器，实现真正意义的按需加载。</p><h1 id="为什么这么快-实现原理" tabindex="-1">为什么这么快（实现原理） <a class="header-anchor" href="#为什么这么快-实现原理" aria-label="Permalink to &quot;为什么这么快（实现原理）&quot;">​</a></h1><ol><li>ESbuild 编译，性能极强</li><li>依赖预构建 <ol><li>模块化兼容：Vite 在预构建阶段将依赖中各种其他模块化规范(CommonJS、UMD)转换 成 ESM，以提供给浏览器。</li><li>性能优化： npm 包中大量的 ESM 代码，大量的 import 请求，会造成网络拥塞。Vite 使用 esbuild，将有大量内部模块的 ESM 关系转换成单个模块，以减少 import 模块请求次数。</li></ol></li><li>按需加载：服务器只在接受到 import 请求的时候，才会编译对应的文件，将 ESM 源码返回给浏览器，实现真正的按需加载。</li><li>缓存 <ol><li>HTTP 缓存： 充分利用 http 缓存做优化，依赖（不会变动的代码）部分用 max-age,immutable 强缓存，源码部分用 304 协商缓存，提升页面打开速度。</li><li>文件系统缓存： Vite 在预构建阶段，将构建后的依赖缓存到 node_modules/.vite ，相关配置更改时，或手动控制时才会重新构建，以提升预构建速度。</li></ol></li><li>重写模块路径：浏览器 import 只能引入相对/绝对路径，而开发代码经常使用 npm 包名直接引入 node_module 中的模块，需要做路径转换后交给浏览器。</li></ol><h1 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h1><ul><li>快！快！非常快！！</li><li>高度集成，开箱即用。</li><li>基于 ESM 急速热更新，无需打包编译。</li><li>基于 esbuild 的依赖预处理，比 Webpack 等 node 编写的编译器快几个数量级。</li><li>兼容 Rollup 庞大的插件机制，插件开发更简洁。</li><li>不与 Vue 绑定，支持 React 等其他框架，独立的构建工具。</li><li>内置 SSR 支持。</li><li>天然支持 TS。</li></ul><h1 id="不足" tabindex="-1">不足 <a class="header-anchor" href="#不足" aria-label="Permalink to &quot;不足&quot;">​</a></h1><ul><li>生产环境集成 Rollup 打包，与开发环境最终执行的代码不一致。</li><li>生产环境实践少。</li></ul><h1 id="对比-webpack" tabindex="-1">对比 Webpack <a class="header-anchor" href="#对比-webpack" aria-label="Permalink to &quot;对比 Webpack&quot;">​</a></h1><ul><li>Webpack 配置丰富使用极为灵活但上手成本高，Vite 开箱即用配置高度集成</li><li>Webpack 启动服务需打包构建，速度慢，Vite 免编译可秒开</li><li>Webpack 热更新需打包构建，速度慢，Vite 毫秒响应</li><li>Webpack 成熟稳定、资源丰富、大量实践案例，Vite 实践较少</li><li>Vite 使用 esbuild 编译，构建速度比 webpack 快几个数量级</li></ul>',17),r=[o];function d(n,c,s,p,h,u){return l(),i("div",null,r)}const _=e(t,[["render",d]]);export{m as __pageData,_ as default};
