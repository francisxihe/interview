import{_ as a,c as e,o as r,U as t}from"./chunks/framework.RtLYYSF3.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/web/javascript/proxy.md","filePath":"knowledge/web/javascript/proxy.md"}'),o={name:"knowledge/web/javascript/proxy.md"},n=t('<h2 id="_1-proxy-是什么" tabindex="-1">1. Proxy 是什么？ <a class="header-anchor" href="#_1-proxy-是什么" aria-label="Permalink to &quot;1. Proxy 是什么？&quot;">​</a></h2><h3 id="_1-1-理解-proxy" tabindex="-1">1.1 理解 Proxy <a class="header-anchor" href="#_1-1-理解-proxy" aria-label="Permalink to &quot;1.1 理解 Proxy&quot;">​</a></h3><p>MDN 定义：Proxy 对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。</p><p>通俗的讲 Proxy 是一个对象操作的拦截器，拦截对目标对象的操作，进行一些自定义的行为，一种分层的思想有点类似 spring 的 AOP。</p><h3 id="_1-2-proxy-怎么用" tabindex="-1">1.2 Proxy 怎么用 <a class="header-anchor" href="#_1-2-proxy-怎么用" aria-label="Permalink to &quot;1.2 Proxy 怎么用&quot;">​</a></h3><p>let p = new Proxy(target, handler); 语法非常简单,只有两个参数，很好理解</p><h4 id="target" tabindex="-1">target <a class="header-anchor" href="#target" aria-label="Permalink to &quot;target&quot;">​</a></h4><p>用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</p><h4 id="handler" tabindex="-1">handler <a class="header-anchor" href="#handler" aria-label="Permalink to &quot;handler&quot;">​</a></h4><p>一个对象，其属性是当执行一个操作时定义代理的行为的函数。</p>',10),l=[n];function i(d,h,p,s,_,c){return r(),e("div",null,l)}const P=a(o,[["render",i]]);export{y as __pageData,P as default};
