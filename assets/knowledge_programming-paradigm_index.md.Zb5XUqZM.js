import{_ as e,c as r,m as t,a as o,t as n,U as i,o as s}from"./chunks/framework.RtLYYSF3.js";const S=JSON.parse('{"title":"编程范式（Programming Paradigm）","description":"","frontmatter":{"title":"编程范式（Programming Paradigm）"},"headers":[],"relativePath":"knowledge/programming-paradigm/index.md","filePath":"knowledge/programming-paradigm/index.md"}'),l={name:"knowledge/programming-paradigm/index.md"},g={id:"frontmatter-title",tabindex:"-1"},d=t("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),m=i("<p>编程范式是一种基础的编程理论框架，它规定了编程的风格、特性和方法。每种范式都提供了一种视角来看待程序的结构和元素之间的关系。常见的编程范式包括：</p><ol><li><strong>命令式编程</strong>：以顺序执行指令的方式描述程序如何工作。如 C、Java。</li><li><strong>声明式编程</strong>：描述计算逻辑而不明确指出其控制流程。如 SQL、HTML。</li><li><strong>函数式编程</strong>：以数学函数的方式构建程序，强调不可变性和函数的无副作用。如 Haskell、Scala。</li><li><strong>面向对象编程</strong>：基于对象概念，对象包含数据和操作数据的方法。如 Java、Python。</li><li><strong>事件驱动编程</strong>：程序流由事件如用户操作、传感器输出等驱动。常用于图形用户界面。</li><li><strong>响应式编程</strong>：专注于异步数据流和变化的传播，常用于处理实时数据和构建交互式用户界面。</li></ol>",2);function _(a,c,p,f,h,P){return s(),r("div",null,[t("h1",g,[o(n(a.$frontmatter.title)+" ",1),d]),m])}const T=e(l,[["render",_]]);export{S as __pageData,T as default};
